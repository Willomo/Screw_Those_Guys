<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if grabbed
if grabbed {
    //Find grab position, but only within the distance of maxRubberLength
    dragLength = point_distance(mouse_x,mouse_y,maxRubberLength + 200,room_height - slingHeight);
    if dragLength &gt; maxRubberLength {
        dragLength = maxRubberLength;
    }
    dragDirection = point_direction(mouse_x,mouse_y,maxRubberLength + 200,room_height - slingHeight);
    
    ballX = maxRubberLength + 200 - lengthdir_x(dragLength,dragDirection);
    ballY = room_height - slingHeight - lengthdir_y(dragLength,dragDirection);
    
    
    if !mouse_check_button(mb_left) {
        grabbed = false;
        launched = true;
        rubberSubtract = true;
        launchSpeed = sqrt(dragLength) / (room_speed * 3);
        launchDirection = point_direction(ballX,ballY,maxRubberLength + 200,room_height - slingHeight);
        
        //Split speed into vertical and horizontal
        
        horizSpeed = ((maxRubberLength + 200 - ballX) * launchSpeed) ;
        vertSpeed = ((room_height - slingHeight - ballY) * launchSpeed)  ;
        
        if vertSpeed &lt; 0 {
            gravity = -9.8;
        } else {
            gravity = 9.8;
        }
        
        
    }
} else if launched {
    if rubberSubtract {
        dragLength -= launchSpeed;
        if dragLength &lt; 0 {
            dragLength = 0;
            rubberSubtract = false;
        }  
    }
    view_enabled[0] = true;
    view_visible[0] = true;
    if ballY + vertSpeed + 5 &gt; room_height {
        vertSpeed /= -2;
        horizSpeed /= 2;
    }
    if vertSpeed &lt; 0.1 and vertSpeed &gt; -0.1 {
        vertSpeed = 0;
    }
    if horizSpeed &lt; 1 {
        horizSpeed = 0;
    }
    ballX += horizSpeed;
    ballY += vertSpeed;
    
    view_xview[0] = ballX - view_wview[0] / 2;
    view_yview[0] = ballY - view_hview[0] / 2;
    view_wview[0] = room_width;
    view_hview[0] = room_height;
    //Gravity
    
    vertSpeed -= gravity / room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="58">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check that the sling isn't already launched
if !launched {
    //If the mouse it close enough to the top of the stand, it'll grab a hold of the rubber band
    if point_distance(maxRubberLength + 200,room_height - slingHeight + 10,mouse_x,mouse_y) &lt; 25 {
        grabbed = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialising Variables

slingHeight = 300;
maxRubberLength = 250;

grabbed = false;
launched = false;

dragLength = 0;
dragDirection = 0;

launchSpeed = 0;

ballX = maxRubberLength + 200;
ballY = room_height - slingHeight;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Draw Rubber Band
draw_line_width_color(maxRubberLength + 200,room_height - slingHeight + 10,maxRubberLength + 200 - lengthdir_x(dragLength,dragDirection),room_height - slingHeight - lengthdir_y(dragLength,dragDirection),10,c_orange,c_orange);


draw_circle_color(ballX,ballY,10,c_red,c_red,0);

draw_rectangle(room_width / 2 - 1,room_height / 2 - 1, room_width / 2 + 1, room_height / 2 + 1, 0);

//Draw Stand
draw_line_width_color(maxRubberLength + 200,room_height,maxRubberLength + 200,room_height - slingHeight,20,c_black,c_black);

draw_text(view_xview[0],view_yview[0],ballY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
